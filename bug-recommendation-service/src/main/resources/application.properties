server.port= 8999
#server.port= 9777
spring.profiles.active=product
#获取代码库指定版本FILE路径
codePath=http://10.141.221.85:8102/code-service
#基本数据配置
MYSQL-IP-PORT=10.131.252.160:3306
#数据源配置 数据库
spring.datasource.name=mysql_druid
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://${MYSQL-IP-PORT}/issueTracker?characterEncoding=utf8&useSSL=false&allowMultiQueries=true&autoReconnect=true 
spring.datasource.username=root
#spring.datasource.password=root
spring.datasource.password=HxUR7gT1dLQwPDUwO0SR02gsJj4wxZHbadojloQt4xRPeSLL0FGgn4qwbwC2+/A3YRw3LgrduBjAbey/MJSqjQ==
public-key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKG3KtWNiPBAzJQNaG/wnMZpb8gATF2Rr+E84udC2Db35eZEBmD57Hu/3+AHCKY1vw73oDLuve0+u4SKba4M21cCAwEAAQ==
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.filter.config.enabled=true
spring.datasource.druid.connection-properties=config.decrypt=true;config.decrypt.key=${public-key}

#kafaka配置
#kafka服务器地址
#80
#spring.kafka.bootstrap-servers=10.141.221.84:9092
spring.kafka.bootstrap-servers=10.141.221.85:9092
#kafaka消费者配置
# earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset=latest
#每一个Consumer都会属于某个Group,通常一个Group下会有多个Consumer
spring.kafka.consumer.group-id=solvedIssueConsumer630
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#mybatis配置
mybatis.type-aliases-package=cn.edu.fudan.bug_recommendation.domain
mybatis.mapperLocations=classpath:mapper/*.xml

#redis配置
spring.redis.database=6
spring.redis.host=10.141.221.85
spring.redis.port=6379
spring.redis.password=85redis
